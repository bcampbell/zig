#include "resources.h"
#include "util.h"	// for JoinPath()

// Handling for data file locations on various platforms/packaging systems,
// as the location of the data files is platform dependent.
//
// unix: they'll be installed according to the packaging guidelines for
//  whatever packaging we supply. This is defined via cmake using the
//  DATA_PATH setting.
//
// osx: the data files should be included inside the app bundle. There is
//  code below for finding the path for the bundle.
//
// windows: the data directory should be installed in the same directory
//  as the exe (which is generally the current directory when the game is
//  run). CMake sets DATA_PATH to "data" in this case.
//
// Note that osx and windows (under cygwin or msys) could also support the
// unix-style installation. But for end-user packaging that's pretty
// unlikely (unless you wanted a cygwin package, say), so the cmake setup
// and the code below just assumes you probably don't want to do that.
//

//static
std::string Resources::s_ResourcePath;


std::string Resources::Map( std::string const& name )
{
	return JoinPath( s_ResourcePath, name );
}



#if defined( __APPLE__ ) && defined( __MACH__ )

#include <sys/syslimits.h>  // for PATH_MAX
#include "osx_glue.h"

void Resources::Init()
{
    char buf[PATH_MAX];
    if( osx_get_resource_path(buf,PATH_MAX) )
    {
        s_ResourcePath = JoinPath(buf,"data");
    }
    else
    {
        // uhoh...
        s_ResourcePath = "./data";
    }
}

#else
// unix and windows - no mucking about.

// DATA_PATH from config.h (generated by cmake)
void Resources::Init()
{
	s_ResourcePath = "./data";  //DATA_PATH;
}

#endif

