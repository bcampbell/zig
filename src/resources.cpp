#include "resources.h"
#include "util.h"	// for JoinPath()
#include "config.h" // for DATA_PATH

// Handling for data file locations on various platforms/packaging systems,
// as the location of the data files is platform dependent.
//
// unix: they'll be installed according to the packaging guidelines for
//  whatever packaging we supply. This is defined via cmake using the
//  DATA_PATH setting.
//
// osx: the data files should be included inside the app bundle. There is
//  code below for finding the path for the bundle.
//
// windows: the data directory should be installed in the same directory
//  as the exe (which is generally the current directory when the game is
//  run). CMake sets DATA_PATH to "data" in this case.
//
// Note that osx and windows (under cygwin or msys) could also support the
// unix-style installation. But for end-user packaging that's pretty
// unlikely (unless you wanted a cygwin package, say), so the cmake setup
// and the code below just assumes you probably don't want to do that.
//

//static
std::string Resources::s_ResourcePath;


std::string Resources::Map( std::string const& name )
{
	return JoinPath( s_ResourcePath, name );
}



#if defined( __APPLE__ ) && defined( __MACH__ )

// OSX

//#include <CFBundle.h>
#include <CoreFoundation/CoreFoundation.h>
#include <Carbon/Carbon.h>


static bool AmIBundled()
{
	ProcessSerialNumber psn = { 0, kCurrentProcess };
	FSRef processref;
	GetProcessBundleLocation( &psn, &processref );
	FSCatalogInfo processinfo;
	FSGetCatalogInfo( &processref, kFSCatInfoNodeFlags, &processinfo,
		NULL, NULL, NULL );
	if( processinfo.nodeFlags & kFSNodeIsDirectoryMask )
		return true;
	else
		return false;
}



void Resources::Init()
{
	if( !AmIBundled() )
	{
		// not running from a bundle (development)
		s_ResourcePath = DATA_PATH;
		return;
	}

	// Locate the resource subdir within our bundle.
	// A bit shite - we should really use CFBundleCopyResourceURL() instead and
	// get proper transparent per-resource localisation and that kind of stuff,
	// but hey.

	CFBundleRef mainbundle = CFBundleGetMainBundle();
	assert( mainbundle );

	char resdir[1024];
	CFURLRef resdirurl = CFBundleCopyResourcesDirectoryURL( mainbundle );
	assert( resdirurl );

	CFURLGetFileSystemRepresentation(
		resdirurl,
		TRUE,
		(UInt8*)resdir,
		sizeof(resdir) );

	CFRelease( resdirurl );

	s_ResourcePath = resdir;

//	printf("ResourcePath: '%s'\n", s_ResourcePath.c_str() );
}

#else
// unix and windows - no mucking about.

// DATA_PATH from config.h (generated by cmake)
void Resources::Init()
{
	s_ResourcePath = DATA_PATH;
}

#endif

